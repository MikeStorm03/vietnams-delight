plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
}
repositories {
    maven {
        name = "Greenhouse Maven"
        url = 'https://repo.greenhouse.house/releases/'
    }
    maven { url "https://mvn.devos.one/releases/" } // Porting Lib
    maven {
        url "https://maven.jamieswhiteshirt.com/libs-release" // Reach Entity Attributes (Required by Porting Lib)
        content {
            includeGroup "com.jamieswhiteshirt"
        }
    }
    maven {
        url "https://jitpack.io/" // Fabric ASM
        content {
            excludeGroup "io.github.fabricators_of_create"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modImplementation "vectorwing:FarmersDelight:1.21.1-3.1.2+refabricated"
    modImplementation "maven.modrinth:corn-delight-fabric:1.21-1.0.0"
}

loom {
    def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
    }
}